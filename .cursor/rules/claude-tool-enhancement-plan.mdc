---
description: The plan for implementing an enhanced tool calling suite for Claude.
globs: 
alwaysApply: false
---
# FPL MCP Server Implementation Plan

## Overview
We will build a comprehensive MCP server that leverages Claude's capabilities to answer a wide range of Fantasy Premier League (FPL) questions. Claude will handle entity extraction natively, with our implementation focusing on providing robust tools and structured data.
This approach will enable Claude to answer questions like:

"Which players have the best form over the last 5 gameweeks?"
"What's the head-to-head record between Liverpool and Manchester City?"
"Who scored the most bonus points among defenders this season?"
"Which players have risen in price the most since the start of the season?"
"What games are coming up next?"
"How's Liverpool's form this year?"
"Is Sané better than Ferguson?"

We will not, in this first MVP, implement an integration with the FPL auth system to pull actual fantasy sports teams and submissions from users who are playing fantasy sports. This app is about Premier League information based on the FPL API.

# Core Approach: Leveraging Claude for Entity Extraction

## Why This Works Better

Claude's Native Understanding:

Claude has been trained on vast amounts of text data including sports and fantasy games
It can naturally understand contextual references, nicknames, and ambiguous mentions
It handles misspellings and variations without explicit programming

Simplifies Implementation:

Eliminates the need to maintain a separate entity extraction system
Reduces potential mismatches between your extraction logic and Claude's understanding
Avoids duplication of NLP capabilities

More Adaptable:

Claude can adjust to new patterns in user queries without code changes
It can handle unexpected variations in how users refer to players/teams
It naturally improves through model updates

# Implementation Plan

## Phase 1: Tool Enhancement for Claude-Led Extraction
Update Tool Interfaces:

Design tools to accept more flexible parameter structures
Allow for partial matches and fuzzy search within the tools
Make tools robust to variations in entity references

Expand Tool Capabilities:

getPlayer: Accept partial names, position + team combinations, or descriptive queries
getTeam: Accept team nicknames, regional references, or manager references
getGameweek: Accept relative references ("next", "current", "last") or date ranges

New Flexible Search Tools:

searchPlayers: Find players based on flexible criteria (form, price, position, ownership)
searchFixtures: Find matches with flexible filtering (team, difficulty, date range)
compareEntities: General-purpose tool for comparing players, teams, or fixtures

## Phase 2: Context-Rich Tool Responses
The focus shifts from extraction to providing rich, well-structured responses that Claude can easily interpret and use:
Structured Response Format:

Use consistent, predictable text structure across all tools
Employ clear section headers (PLAYER_INFO, KEY_STATS, etc.)
Include rich metadata in a machine-friendly format
Provide context annotations for numeric values (e.g., "8 (league-leading)")
Include strategic notes relevant to FPL decision-making
Separate raw data from interpretive elements

Example structured text format:
PLAYER_INFO:
Name: Mohamed Salah
Team: Liverpool
Position: Midfielder

KEY_STATS:
- Goals: 8 (league-leading)
- Form (last 5 GW): 7.5

STRATEGIC_NOTES:
- Consistent high-performer
- Often captained

UPCOMING_FIXTURES_SUMMARY:
Next 3: BRE (H), MCI (A), FUL (H) - Difficulty: Medium
Add Reference Information:

Include relevant benchmarks: league averages, position averages
Add historical context when applicable
Connect information to FPL strategy concepts

Contextual Enrichment:

Include team form context with player information
Add fixture difficulty information with player/team stats
Include price trends and ownership changes

## Phase 3: Robust Error and Disambiguation Handling
Disambiguation Strategy:

Tools return clear confidence levels with matches
When multiple potential matches exist, return all candidates with identifying details
Include properties to help disambiguation (team, position, price range)
Provide context-aware suggestions when exact matches aren't found
Support interactive disambiguation through follow-up queries

Example disambiguation response:
DISAMBIGUATION_REQUIRED:
Query: "Ferguson"
Potential matches: 2
Data timestamp: 2025-05-09T15:30:00Z

CANDIDATE_1:
Name: Evan Ferguson (Evan Ferguson)
Team: Brighton
Position: FWD
Price: £6.2m
Selected by: 4.5%

CANDIDATE_2:
Name: Nathan Ferguson (Nathan Ferguson)
Team: Crystal Palace
Position: DEF
Price: £4.0m
Selected by: 0.2%

To get specific player data, please specify which player you're interested in.
Error Handling Strategy:

Clearly distinguish between different error types (not found, API error, invalid input)
Provide helpful suggestions for "no results" scenarios
Include alternative search terms or related entities when exact matches fail
Suggest broader queries when specific ones yield no results
Return metadata about why the search failed

Example error response:
ERROR:
Type: NOT_FOUND
Message: No players match the criteria "position:DEF, goals:10+"

SUGGESTIONS:
- Try broadening your search to "position:DEF, goals:5+"
- Top scoring defenders this season have 7 goals maximum
- Try searching for "position:DEF, sortBy:goals, limit:10" to see the highest-scoring defenders

## Phase 4: Adaptive Tool Selection
Since Claude will handle entity extraction, focus on helping it select the right tools:
Comprehensive Tool Documentation:

Ensure tool descriptions clearly explain capabilities and use cases
Include examples of when each tool should be used
Make parameter descriptions detailed and clear

Example parameter documentation:
formPeriod: Specifies the period for form calculation. Accepts 'last X' where X is 1-38, 'season', or ranges like 'GW5-GW10'. If not specified, defaults to current overall form.
Tool Selection Guidance:

Update system prompts to guide Claude on tool selection strategies
Provide clear instructions for complex query resolution
Offer examples of multi-tool approaches for complex questions

Progressive Tool Usage Pattern:

Guide Claude to start with broader tools and narrow down
Encourage follow-up tool calls based on initial results
Structure the workflow from general to specific

Technical Implementation Details
Flexible Tool Design:

Accept multiple parameter formats (exact/fuzzy/descriptive)
Implement fuzzy matching within the tool logic
Return clear confidence indicators with results
Include "no results" handling with helpful suggestions
Support partial/incomplete information in queries

## Enhanced Response Structure:

Summary section highlighting key information
Detailed structured data with contextual annotations
Contextual annotations (league ranking, form trend, etc.)
Strategic implications when relevant
Related information that might be helpful
Suggested follow-up queries when appropriate

## Example Revised Tool Implementation

Instead of:
javascript// Current pattern
server.tool(
    'get-player',
    { playerId: z.number() },
    async ({ playerId }) => {
        // Implementation that returns JSON
    }
);

Implement:
javascript// More flexible pattern
server.tool(
    'get-player',
    {
        playerQuery: z.string().optional().describe(
            "Player name or description, supports partial matches"
        ),
        playerId: z.number().optional().describe(
            "Exact FPL ID of the player"
        ),
        teamId: z.number().optional().describe(
            "Filter by team ID"
        ),
        position: z.string().optional().describe(
            "Filter by position (GKP, DEF, MID, FWD)"
        ),
        includeStats: z.boolean().optional().default(true).describe(
            "Include detailed player statistics"
        ),
        includeFixtures: z.boolean().optional().default(false).describe(
            "Include upcoming fixtures information"
        ),
    },
    async (params) => {
        try {
            // Implementation with fuzzy search logic...
            
            return {
                content: [{
                    type: 'text',
                    text: `
PLAYER_INFO:
Name: ${player.web_name} (${player.full_name})
Team: ${player.team_name}
Position: ${player.position}
Price: £${(player.now_cost / 10).toFixed(1)}m
Selected by: ${player.selected_by_percent}%

KEY_STATS:
- Form: ${player.form} ${getFormContext(player.form, position)}
- Total Points: ${player.total_points} ${getPointsContext(player.total_points, player.position)}
- Goals: ${player.goals_scored} ${player.position === 'DEF' ? '(impressive for a defender)' : ''}
- Assists: ${player.assists}
- Bonus Points: ${player.bonus}

${params.includeFixtures ? `
UPCOMING_FIXTURES:
${formatFixtures(player.upcoming_fixtures)}
` : ''}

STRATEGIC_NOTES:
${generateStrategyNotes(player)}

Data timestamp: ${new Date().toISOString()}
                    `
                }]
            };
        } catch (error) {
            // Handle errors and provide suggestions
            // ...
        }
    }
);

## Key Tools to Implement

getPlayer: Retrieve detailed information about a specific player
searchPlayers: Find players based on complex criteria
getTeam: Retrieve detailed information about a specific team
getGameweek: Get information about a specific gameweek
searchFixtures: Find fixtures based on teams, dates, or gameweeks
compareEntities: Compare players, teams, or fixtures

### Example Query Implementation
1. "Which players have the best form over the last 5 gameweeks?"

Tool Used: searchPlayers
Parameters:
javascript{
    sortBy: "form",
    formPeriod: "last 5",
    limit: 10
}

### Response Structure:
SEARCH_RESULTS:
Total matches: 10
Query: "Best form players"
Filters: formPeriod=last 5, sortBy=form, limit=10
Data timestamp: 2025-05-09T15:30:00Z

PLAYER_1:
Name: Mohamed Salah (Mohamed Salah Hamed Mahrous Ghaly)
Team: Liverpool
Position: MID
Price: £12.7m

KEY_STATS:
- Form (last 5 GW): 9.2 (highest in league)
- Total Points: 220 (2nd highest overall)
- Ownership: 48.9% (highly owned)

UPCOMING_FIXTURES:
Next 3: BRE (H), MCI (A), FUL (H) - Difficulty: Medium

STRATEGIC_NOTES:
- Consistent high-performer
- Main penalty taker for Liverpool
- Often captained

PLAYER_2:
...
2. "What's the head-to-head record between Liverpool and Manchester City?"
Tool Used: compareEntities
Parameters:
javascript{
    entity1: "Liverpool",
    entity2: "Manchester City",
    entityType: "team",
    comparison: "head-to-head"
}

### Response Structure:
HEAD_TO_HEAD_COMPARISON:
Teams: Liverpool vs. Manchester City
Data timestamp: 2025-05-09T15:30:00Z

OVERALL_RECORD:
- Total matches: 172
- Liverpool wins: 81
- Manchester City wins: 47
- Draws: 44

RECENT_MEETINGS (LAST 5):
- 2025-01-14: Liverpool 2-2 Manchester City (Premier League)
- 2024-10-20: Manchester City 1-0 Liverpool (Premier League)
- 2024-03-10: Liverpool 1-1 Manchester City (Premier League)
- 2023-12-02: Manchester City 0-1 Liverpool (Premier League)
- 2023-04-01: Manchester City 4-1 Liverpool (Premier League)

PREMIER_LEAGUE_RECORD:
- Total matches: 54
- Liverpool wins: 21
- Manchester City wins: 13
- Draws: 20

CURRENT_SEASON_MEETINGS:
- 2025-01-14: Liverpool 2-2 Manchester City
- 2024-10-20: Manchester City 1-0 Liverpool
3. "Who scored the most bonus points among defenders this season?"
Tool Used: searchPlayers
Parameters:
javascript{
    position: "DEF",
    sortBy: "bonus",
    period: "season",
    limit: 10
}

### Response Structure:
SEARCH_RESULTS:
Total matches: 10
Query: "Defenders with most bonus points"
Filters: position=DEF, sortBy=bonus, period=season, limit=10
Data timestamp: 2025-05-09T15:30:00Z

PLAYER_1:
Name: Trent Alexander-Arnold (Trent Alexander-Arnold)
Team: Liverpool
Position: DEF
Price: £8.5m

KEY_STATS:
- Bonus Points: 28 (highest among defenders)
- Total Points: 178 (2nd highest among defenders)
- Clean Sheets: 12
- Goals: 3
- Assists: 14 (highest among defenders)

UPCOMING_FIXTURES:
Next 3: BRE (H), MCI (A), FUL (H) - Difficulty: Medium

STRATEGIC_NOTES:
- Main set-piece taker for Liverpool
- High attacking potential for a defender
- Premium defender option

PLAYER_2:
...
4. "Which players have risen in price the most since the start of the season?"
Tool Used: searchPlayers
Parameters:
javascript{
    sortBy: "price_rise",
    period: "season",
    limit: 10
}

### Response Structure:
SEARCH_RESULTS:
Total matches: 10
Query: "Players with highest price rise"
Filters: sortBy=price_rise, period=season, limit=10
Data timestamp: 2025-05-09T15:30:00Z

PLAYER_1:
Name: Cole Palmer (Cole Palmer)
Team: Chelsea
Position: MID
Price: £9.2m (started at £5.5m)

KEY_STATS:
- Price Rise: £3.7m (+67.3%)
- Form: 8.2
- Total Points: 210
- Ownership: 52.8% (highly owned)
- Goals: 18
- Assists: 11

UPCOMING_FIXTURES:
Next 3: TOT (H), BOU (A), NFO (H) - Difficulty: Medium

STRATEGIC_NOTES:
- Breakout star of the season
- On penalties for Chelsea
- High value midfielder

PLAYER_2:
...
5. "What games are coming up next?"
Tool Used: getGameweek
Parameters:
javascript{
    type: "next",
    includeFixtures: true
}

### Response Structure:
GAMEWEEK_INFO:
Gameweek: Gameweek 36
Status: Next Gameweek
Deadline: 2025-05-10T10:30:00Z (in 19 hours)
Finished: No
Data timestamp: 2025-05-09T15:30:00Z

FIXTURES:
- Manchester United vs. Arsenal (2025-05-10T12:30:00Z)
- Brentford vs. Liverpool (2025-05-10T15:00:00Z)
- Fulham vs. Crystal Palace (2025-05-10T15:00:00Z)
- Newcastle vs. Brighton (2025-05-10T15:00:00Z)
- West Ham vs. Aston Villa (2025-05-10T15:00:00Z)
- Wolves vs. Nottingham Forest (2025-05-10T15:00:00Z)
- Chelsea vs. Tottenham (2025-05-10T17:30:00Z)
- Everton vs. Sheffield United (2025-05-11T13:00:00Z)
- Manchester City vs. Bournemouth (2025-05-11T15:30:00Z)
- Burnley vs. Luton (2025-05-11T15:30:00Z)

KEY_MATCHES:
- Manchester United vs. Arsenal (Top 4 battle)
- Chelsea vs. Tottenham (London derby)
- Manchester City vs. Bournemouth (Title race implications)
6. "How's Liverpool's form this year?"
Tool Used: getTeam
Parameters:
javascript{
    team: "Liverpool",
    period: "season",
    includeForm: true
}

### Response Structure:
TEAM_INFO:
Name: Liverpool FC
Current Position: 2nd
Points: 79 (5 behind leaders)
Data timestamp: 2025-05-09T15:30:00Z

FORM_SUMMARY:
- Last 5 matches: WWDWL (10 points from 15)
- Last 10 matches: WWDWLWWDWW (23 points from 30)
- Home form: W16 D2 L0 (50 points from 18 matches)
- Away form: W9 D2 L7 (29 points from 18 matches)

RECENT_RESULTS:
- Liverpool 3-0 Newcastle (2025-05-04)
- Everton 0-2 Liverpool (2025-04-27)
- Liverpool 1-1 Manchester City (2025-04-20)
- Southampton 1-3 Liverpool (2025-04-13)
- Liverpool 0-1 Arsenal (2025-04-07)

KEY_STATS:
- Goals scored: 78 (2nd highest)
- Goals conceded: 29 (3rd best defense)
- Clean sheets: 15
- Win rate: 69.4%

KEY_PLAYERS:
- Top scorer: Mohamed Salah (20 goals)
- Most assists: Trent Alexander-Arnold (14 assists)
- Most minutes: Alisson (3,240 minutes)

UPCOMING_FIXTURES:
Next 3: BRE (A), MCI (H), FUL (A) - Difficulty: Medium
7. "Is Sané better than Ferguson?"
Tool Used: compareEntities
Parameters:
javascript{
    entity1: "Sané",
    entity2: "Ferguson",
    entityType: "player"
}

### Response Structure:
DISAMBIGUATION_REQUIRED:
Query 1: "Sané"
Potential matches: 1
Query 2: "Ferguson"
Potential matches: 2
Data timestamp: 2025-05-09T15:30:00Z

CANDIDATE_FOR_SANÉ:
Name: Leroy Sané (Leroy Sané)
Team: Bayern Munich
Position: MID
Price: £7.8m

CANDIDATES_FOR_FERGUSON:
1. Name: Evan Ferguson (Evan Ferguson)
   Team: Brighton
   Position: FWD
   Price: £6.2m
   Selected by: 4.5%

2. Name: Nathan Ferguson (Nathan Ferguson)
   Team: Crystal Palace
   Position: DEF
   Price: £4.0m
   Selected by: 0.2%

To compare these players, please specify which Ferguson you're interested in.

After clarification:
PLAYER_COMPARISON:
Players: Leroy Sané vs. Evan Ferguson
Data timestamp: 2025-05-09T15:30:00Z

BASIC_INFO:
- Sané: MID (Bayern Munich), £7.8m, selected by 12.3%
- Ferguson: FWD (Brighton), £6.2m, selected by 4.5%

SEASON_PERFORMANCE:
- Sané: 159 points, 11 goals, 9 assists, 15 bonus
- Ferguson: 112 points, 9 goals, 2 assists, 11 bonus

FORM (LAST 5 GW):
- Sané: 7.2 (improving - 3 goals in last 5)
- Ferguson: 4.8 (declining - 1 goal in last 5)

VALUE_ASSESSMENT:
- Sané: 20.4 points per £1m
- Ferguson: 18.1 points per £1m

UPCOMING_FIXTURES:
- Sané: MUN (H), BRE (A), NEW (H) - Medium difficulty
- Ferguson: ARS (A), MCI (H), CHE (A) - High difficulty

VERDICT:
- Overall: Sané outperforming Ferguson in most metrics
- Form: Sané in better current form
- Value: Sané slightly better value for money
- Fixtures: Sané has more favorable upcoming matches

# Implementation Priorities

## First: Create Structured Response Format

Define consistent text structure for tool responses
Implement metadata-rich formats optimized for Claude
Develop standard section layouts for different entity types


## Second: Build Robust Tool Interfaces

Implement flexible parameter handling with clear documentation
Add comprehensive error handling and disambiguation logic
Support fuzzy matching with confidence scoring


## Third: Develop Core Search and Comparison Tools

Create foundational player/team search capabilities
Implement comparison tool with multi-entity resolution
Add FPL-specific strategic context to results


## Fourth: Add Data Freshness and Caching Logic

Implement tiered caching based on data volatility
Add freshness indicators to all responses
Create fallback strategies for stale data scenarios

# Implementation Requirements

## Database Schema Extensions:

Historical price data for tracking price changes
Form calculation fields for different time periods
Head-to-head match history between teams

## Enhanced Data Synchronization:

Regular updates of player prices and ownership
Historical tracking of game statistics
Team form metrics calculation

## Robust Search Capabilities:

Flexible filtering across multiple dimensions
Support for sorting by various metrics
Ability to limit results to relevant subsets

## Data Freshness Approach:

Include data timestamp in all tool responses
Mark data as "live" or with recency indicators
Indicate when using cached vs fresh data
Implement tiered caching based on data volatility
Handle stale data scenarios gracefully