---
description: 
globs: 
alwaysApply: true
---
Enhancing MCP Server Prompts and Resources

To better support our enhanced tooling, we need to update both the /prompts and /resources sections of our MCP server. Here's a comprehensive plan for each:

**I. Overall Strategy for Prompts & Resources**

*   **Prompts**: The `/prompts` section will define structured interactions for Claude. These prompts will provide Claude with system-level instructions on its role, available tools, tool selection strategies, and response guidelines. Specialized prompts will cater to common FPL query patterns.
*   **Resources**: The `/resources` section will provide Claude with access to contextual information. This includes:
    *   Static, curated FPL strategic advice (e.g., team structure, captaincy).
    *   Structured views of core FPL data entities (players, teams, gameweeks, fixtures) primarily sourced from our Redis cache. These resources can act as lookup tables or context providers, supplementing the dynamic, query-based nature of our tools.
*   **Synergy**:
    *   **Prompts** will instruct Claude on how to effectively use the **Tools** we've built.
    *   **Tools** will perform actions (searches, detailed lookups, comparisons) on dynamic data.
    *   **Resources** will offer supplementary static knowledge (strategies) and structured access to cached data sets, which Claude can use for grounding or to enrich its responses. The MCP server will make these resources accessible, likely via their URI templates.

**II. Detailed Plan for `/prompts` Section**

**A. Main `fpl-assistant` Prompt (`fpl-assistant.ts`)**

*   **Purpose**: General FPL queries.
*   **Schema**: `{ query: z.string().optional() }`
*   **System Message Content**:
    *   Role: "You are an English Premier League expert assistant. Help users with EPL-related queries using your extensive knowledge and the available tools. Users may ask you fantasy sports
                    questions about the league, FPL or Fantasy Premeier which you also can answer." 
    *   **Available Tools**:
        *   `getPlayer`: For detailed information about a specific player.
        *   `searchPlayers`: For finding players based on various criteria (stats, form, price, position, team).
        *   `getTeam`: For detailed team information, form, and statistics.
        *   `getGameweek`: For information about current, next, previous, or specific gameweeks.
        *   `searchFixtures`: For finding matches based on teams, dates, or gameweeks, including difficulty.
        *   `compareEntities`: For comparing players or teams on various metrics.
    *   **Tool Selection Strategy**:
        1.  Specific player info: `getPlayer`.
        2.  Ranking/list queries ("who has most...", "best players for...", "players by price/form"): `searchPlayers`.
        3.  Team performance/info: `getTeam`.
        4.  Gameweek specific info (current, next, past ID): `getGameweek`.
        5.  Fixture searches (by team, date range, difficulty, H2H): `searchFixtures`.
        6.  Direct comparisons (player vs. player, team vs. team): `compareEntities`.
        7.  Complex questions: Consider sequential tool use.
    *   **Response Guidelines**: Always provide context for statistics (e.g., "8 goals (3rd highest among midfielders)"). Include strategic FPL insights when relevant. For player recommendations, consider form, fixtures, and value. Explain your reasoning for recommendations. When appropriate, suggest alternatives or considerations.
    *   Reminder: "Fantasy Premier League (FPL) is a fantasy sports game based on the English Premier League."

**B. Specialized Prompts**

1.  **`transfer-advice` Prompt (`transfer-advice.ts`)**
    *   **Purpose**: Guiding users on FPL player transfers.
    *   **Schema**: `{ budget: z.number().optional(), position: z.string().optional(), existingPlayer: z.string().optional() }`
    *   **System Message**:
        *   Text: `You are a Fantasy Premier League transfer advisor. Provide expert transfer suggestions based on form, fixtures, price, and ownership. Use the searchPlayers tool to find transfer options based on the criteria provided. If a specific player is mentioned to replace, use compareEntities to evaluate alternatives. Consider both short-term (next 1-3 gameweeks) and medium-term (next 5+ gameweeks) potential in your recommendations.`

2.  **`team-analysis` Prompt (`team-analysis.ts`)**
    *   **Purpose**: Detailed FPL-centric analysis of Premier League teams.
    *   **Schema**: `{ team: z.string().optional(), analysisType: z.string().optional() }`
    *   **System Message**:
        *   Text: `You are a Fantasy Premier League team analyst. Provide detailed analysis of Premier League teams from an FPL perspective. Use the getTeam tool to retrieve comprehensive information about the specified team. For fixture analysis, also use the searchFixtures tool to evaluate upcoming matches. Focus your analysis on aspects relevant to FPL managers: attacking potential, defensive solidity, consistent performers, and fixture difficulty.`

**C. Prompt Registration (`prompts/index.ts`)**
```typescript
// In prompts/index.ts
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { z } from 'zod';
// Assuming fplAssistantPrompt, transferAdvicePrompt, teamAnalysisPrompt are defined in their respective files
// e.g., import { fplAssistantPrompt } from './fpl-assistant';

// Define prompt objects (example for fplAssistant, others would be similar)
const fplAssistantPromptDef = {
    name: 'fpl-assistant',
    schema: { query: z.string().optional() },
    handler: ({ query }: { query?: string }) => ({
        messages: [
            {
                role: 'system',
                content: {
                    type: 'text',
                    text: `You are an English Premier League expert. Help users with EPL-related queries using your extensive knowledge and the available tools. Users may ask you fantasy sports
                    questions about the league which you also can answer. 

AVAILABLE TOOLS:
- getPlayer: For detailed information about a specific player.
- searchPlayers: For finding players based on various criteria (stats, form, price, position, team).
- getTeam: For detailed team information, form, and statistics.
- getGameweek: For information about current, next, previous, or specific gameweeks.
- searchFixtures: For finding matches based on teams, dates, or gameweeks, including difficulty.
- compareEntities: For comparing players or teams on various metrics.

TOOL SELECTION STRATEGY:
1. Specific player info: getPlayer.
2. Ranking/list queries ("who has most...", "best players for...", "players by price/form"): searchPlayers.
3. Team performance/info: getTeam.
4. Gameweek specific info (current, next, past ID): getGameweek.
5. Fixture searches (by team, date range, difficulty, H2H): searchFixtures.
6. Direct comparisons (player vs. player, team vs. team): compareEntities.
7. Complex questions: Consider sequential tool use.

RESPONSE GUIDELINES:
- Always provide context for statistics (e.g., "8 goals (3rd highest among midfielders)")
- Include strategic FPL insights when relevant
- For player recommendations, consider form, fixtures, and value
- Explain your reasoning for recommendations
- When appropriate, suggest alternatives or considerations

Remember that you're advising on English Premier League (EPL) and Fantasy Premiere League (FPL), which is a fantasy sports game based on the English Premier League.`
                }
            },
            { role: 'user', content: { type: 'text', text: query || 'Tell me about the current gameweek.' } }
        ]
    })
};

const transferAdvicePromptDef = { /* ... as defined in plan ... */ };
const teamAnalysisPromptDef = { /* ... as defined in plan ... */ };


export const registerPrompts = (server: McpServer) => {
  server.prompt(
    fplAssistantPromptDef.name,
    fplAssistantPromptDef.schema,
    fplAssistantPromptDef.handler
  );
  // server.prompt(transferAdvicePromptDef.name, transferAdvicePromptDef.schema, transferAdvicePromptDef.handler);
  // server.prompt(teamAnalysisPromptDef.name, teamAnalysisPromptDef.schema, teamAnalysisPromptDef.handler);
  console.log('Prompts registered successfully');
};
```

**III. Detailed Plan for `/resources` Section**

Resources will provide structured information, accessible via URIs. Handlers will fetch data (primarily from Redis) and format it. All resource responses should include a `Data timestamp`.

**A. `strategyResource` (`resources/fpl/strategy.ts`)**

*   **Purpose**: Provide static, curated FPL strategic advice.
*   **Name**: `fpl-strategy`
*   **Template**: `fpl://strategy/{topic?}`
*   **Handler**:
    *   Topics: `team-structure`, `differentials`, `captaincy`, `transfers`. (Chips topic deferred).
    *   Output: Structured text with clear headers (e.g., `FPL_STRATEGY_TEAM_STRUCTURE:`). Content for these topics will be based on the original `prompt-and-resource-plan` document, excluding "chips".
    *   If no topic, list available strategy topics.
```typescript
// In resources/fpl/strategy.ts (Conceptual handler)
import { ResourceTemplate } from '@modelcontextprotocol/sdk/server/mcp.js';

const strategyContent = {
    'team-structure': `FPL_STRATEGY_TEAM_STRUCTURE:\nData timestamp: ${new Date().toISOString()}\n\nBALANCED TEAM STRUCTURE:\n... (content from original plan) ...`,
    'differentials': `FPL_STRATEGY_DIFFERENTIALS:\nData timestamp: ${new Date().toISOString()}\n\nDIFFERENTIAL STRATEGY:\n... (content from original plan) ...`,
    'captaincy': `FPL_STRATEGY_CAPTAINCY:\nData timestamp: ${new Date().toISOString()}\n\nCAPTAINCY STRATEGY:\n... (content from original plan) ...`,
    'transfers': `FPL_STRATEGY_TRANSFERS:\nData timestamp: ${new Date().toISOString()}\n\nTRANSFER STRATEGY:\n... (content from original plan) ...`
};

export const strategyResource = {
  name: 'fpl-strategy',
  template: new ResourceTemplate('fpl://strategy/{topic?}', { list: undefined }),
  handler: async (uri: URL, variables: { topic?: string }) => {
    const timestamp = new Date().toISOString();
    if (variables.topic && variables.topic in strategyContent) {
      return { contents: [{ uri: uri.href, text: strategyContent[variables.topic as keyof typeof strategyContent].replace(/\${new Date\(\)\.toISOString\(\)}/g, timestamp) }] };
    }
    if (variables.topic) {
      return { contents: [{ uri: uri.href, text: `Strategy topic "${variables.topic}" not found. Available topics: ${Object.keys(strategyContent).join(', ')}\nData timestamp: ${timestamp}` }] };
    }
    return {
      contents: [{
        uri: uri.href,
        text: `FPL_STRATEGY_TOPICS:\nAvailable strategy resources:\n${Object.keys(strategyContent).map(topic => `- ${topic}`).join('\n')}\nAccess specific topics using: fpl://strategy/{topic}\nData timestamp: ${timestamp}`
      }]
    };
  }
};
```

**B. `playersResource` (`resources/fpl/players.ts`)**

*   **Purpose**: Provide structured access to player data from Redis.
*   **Name**: `fpl-players`
*   **Template**: `fpl://players/{playerQuery?}` (ID or name fragment)
*   **Handler**:
    *   Fetch `fpl:players` (Array of `Player`) from Redis.
    *   If `playerQuery`: filter by ID or name (fuzzy), sort by relevance, return detailed structured info for matches (`FPL_PLAYERS_DETAILED:`).
    *   If no `playerQuery`: return summary of first N players or key players (`FPL_PLAYERS_SUMMARY:`).
    *   Formatting similar to `formatPlayersData` in original plan, using fields from `types/fpl-domain.types.ts`.

**C. `gameweeksResource` (`resources/fpl/gameweeks.ts`)**

*   **Purpose**: Provide structured access to gameweek data from Redis.
*   **Name**: `fpl-gameweeks`
*   **Template**: `fpl://gameweeks/{gameweekQuery?}` (ID, "current", "next", "previous")
*   **Handler**:
    *   Fetch `fpl:gameweeks` (Array of `Gameweek`) from Redis.
    *   Handle `gameweekQuery` appropriately.
    *   Format: `GAMEWEEK_INFO:` for single, `FPL_GAMEWEEKS:` for list, as per original plan.

**D. `teamsResource` (`resources/fpl/teams.ts`)**

*   **Purpose**: Provide structured access to team data from Redis.
*   **Name**: `fpl-teams`
*   **Template**: `fpl://teams/{teamQuery?}` (ID or name fragment)
*   **Handler**:
    *   Fetch `fpl:teams` (Array of `Team`) from Redis.
    *   If `teamQuery`: filter by ID or name, return detailed info (`FPL_TEAM_DETAILED:`).
    *   If no `teamQuery`: return summary list (`FPL_TEAMS_SUMMARY:`).
    *   Fields: Name, Short Name, Position, Points, Form, Strength indicators, W/D/L from `types/fpl-domain.types.ts`.

**E. `fixturesResource` (`resources/fpl/fixtures.ts`)**

*   **Purpose**: Provide structured access to fixture data from Redis.
*   **Name**: `fpl-fixtures`
*   **Template**: `fpl://fixtures/{gameweekId?}`
*   **Handler**:
    *   Fetch `fpl:fixtures` (Array of `Fixture`) from Redis.
    *   If `gameweekId`: return fixtures for that GW (`FPL_FIXTURES_GAMEWEEK:`).
    *   If no `gameweekId`: return fixtures for current or next GW by default.
    *   Fields: HomeTeam, AwayTeam, Score (if finished), Kickoff, Difficulty from `types/fpl-domain.types.ts`.

**F. Resource Registration (`resources/index.ts`)**
```typescript
// In resources/index.ts
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { gameweeksResource } from './fpl/gameweeks';
import { teamsResource } from './fpl/teams'; // Assuming created
import { playersResource } from './fpl/players';
import { fixturesResource } from './fpl/fixtures'; // Assuming created
import { strategyResource } from './fpl/strategy';

export function registerResources(server: McpServer) {
  server.resource(gameweeksResource.name, gameweeksResource.template, gameweeksResource.handler);
  server.resource(teamsResource.name, teamsResource.template, teamsResource.handler);
  server.resource(playersResource.name, playersResource.template, playersResource.handler);
  server.resource(fixturesResource.name, fixturesResource.template, fixturesResource.handler);
  server.resource(strategyResource.name, strategyResource.template, strategyResource.handler);
  console.log('Resources registered successfully');
}
```

**IV. Data Requirements for Resources (and Redis Cache)**

This remains consistent: resources and tools will draw from the rich `Player`, `Team`, `Gameweek`, `Fixture` objects (defined in `types/fpl-domain.types.ts`) and `PlayerDetailResponse` (from `types/fpl-api.types.ts`) stored in Redis. A thorough audit of `service.ts` and `fpl-data-sync.ts` is essential to confirm data richness and correct caching.

**V. Next Steps**

1.  **Implement Prompts**: Create/update `.ts` files in `/prompts` and `prompts/index.ts`.
2.  **Implement Resources**: Create/update `.ts` files in `/resources/fpl/` and `resources/index.ts`.
3.  **Proceed with Redis Data Audit & Sync Process Audit**: As previously outlined, to ensure all data fields required by tools and these new resources are fetched, mapped, and cached correctly.