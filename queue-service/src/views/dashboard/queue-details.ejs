<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Queue: <%= queueName %></title>
        <link rel="stylesheet" href="/styles.css" />
    </head>
    <body>
        <%
            function formatTimestampDual(timestamp) {
                if (!timestamp) return 'N/A';
                const date = new Date(timestamp);
                const options = {
                    year: 'numeric', month: 'short', day: 'numeric',
                    hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true
                };
                const pdtOptions = {...options, timeZone: 'America/Los_Angeles', timeZoneName: 'short'};
                const utcOptions = {...options, timeZone: 'UTC', timeZoneName: 'short'};

                let pdtString = date.toLocaleString('en-US', pdtOptions);
                let utcString = date.toLocaleString('en-US', utcOptions);

                // Add explicit labels if 'short' timeZoneName doesn't include them or for more clarity
                // This depends on browser's toLocaleString implementation for 'short'
                if (!pdtString.includes('PDT') && !pdtString.includes('PST')) {
                    pdtString += ' PDT';
                }
                if (!utcString.includes('UTC') && !utcString.includes('GMT')) { // GMT is often used interchangeably with UTC in output
                    utcString += ' UTC';
                }
                
                return `${pdtString}<br>${utcString}`;
            }

            // Define the missing function here
            function getJobTypeBadgeClass(refreshType) {
                if (!refreshType) return 'light'; // Default badge style for undefined types
                const type = String(refreshType).toLowerCase();
                switch (type) {
                    case 'full':
                    case 'full-sync':
                        return 'primary'; // Example: Blue
                    case 'incremental':
                    case 'hourly': // Matching your log: "hourly-refresh"
                    case 'hourly-refresh':
                        return 'info';    // Example: Light Blue/Teal
                    case 'live':
                    case 'live-update':
                        return 'success'; // Example: Green
                    case 'schedule':
                    case 'schedule-update':
                        return 'warning'; // Example: Yellow (ensure dark text for readability)
                    case 'post-match':
                        return 'dark';    // Example: Dark Grey
                    case 'daily-refresh':
                        return 'secondary'; // Example: Grey
                    default:
                        return 'light';   // A light/default badge for other types
                }
            }
        %>
        <div class="container">
            <div class="header">
                <h1>Queue: <%= queueName %></h1>
                <a href="/dashboard" class="back-btn">‚Üê Back to Dashboard</a>
            </div>

            <div class="tab-container">
                <div class="tab-buttons">
                    <button class="tab-btn active" data-tab="waiting">
                        Jobs Waiting (<%= jobs.waiting.length %>)
                    </button>
                    <button class="tab-btn" data-tab="active">
                        Active Jobs (<%= jobs.active.length %>)
                    </button>
                    <button class="tab-btn" data-tab="stalled">
                        Stalled Jobs (<%= jobs.stalled.length %>)
                    </button>
                    <button class="tab-btn" data-tab="delayed">
                        Delayed Jobs (<%= jobs.delayed.length %>)
                    </button>
                    <button class="tab-btn" data-tab="completed">
                        Completed Jobs (<%= jobs.completed.length %>)
                    </button>
                    <button class="tab-btn" data-tab="failed">
                        Failed Jobs (<%= jobs.failed.length %>)
                    </button>
                </div>

                <div id="waiting" class="tab-content active">
                    <% if (jobs.waiting.length > 0) { %>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Scheduled Time</th>
                                <th>Data</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% jobs.waiting.forEach(job => { %>
                            <tr>
                                <td><%= job.id %></td>
                                <td><%= job.name %></td>
                                <td><%- formatTimestampDual(job.timestamp) %></td>
                                <td>
                                    <div class="job-card">
                                        <h3>Job #<%= job.id %></h3>
                                        <div class="job-meta">
                                            <span class="badge badge-<%= getJobTypeBadgeClass(job.data.refreshType) %>">
                                                <%= job.data.refreshType || 'unknown' %>
                                            </span>
                                            <span class="badge badge-info">
                                                GW: <%= job.data.gameweek || 'N/A' %>
                                            </span>
                                            <span class="badge badge-secondary">
                                                By: <%= job.data.triggeredBy || 'unknown' %>
                                            </span>
                                            <% if(job.data.isMatchDay) { %>
                                                <span class="badge badge-danger">Match Day</span>
                                            <% } %>
                                        </div>
                                        <div class="job-timestamp">
                                            Added: <%- formatTimestampDual(job.timestamp) %>
                                        </div>
                                        <% if(job.failedReason) { %>
                                            <div class="job-error">
                                                Error: <%= job.failedReason %>
                                            </div>
                                        <% } %>
                                    </div>
                                </td>
                            </tr>
                            <% }); %>
                        </tbody>
                    </table>
                    <% } else { %>
                    <div class="empty-state">No upcoming jobs</div>
                    <% } %>
                </div>

                <div id="active" class="tab-content">
                    <% if (jobs.active.length > 0) { %>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Status</th>
                                <th>Started At</th>
                                <th>Data</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% jobs.active.forEach(job => { %>
                            <tr>
                                <td><%= job.id %></td>
                                <td><%= job.name %></td>
                                <td>
                                    <span class="status-badge active">Active</span>
                                </td>
                                <td><%- formatTimestampDual(job.processedOn) %></td>
                                <td>
                                    <div class="job-card">
                                        <h3>Job #<%= job.id %></h3>
                                        <div class="job-meta">
                                            <span class="badge badge-<%= getJobTypeBadgeClass(job.data.refreshType) %>">
                                                <%= job.data.refreshType || 'unknown' %>
                                            </span>
                                            <span class="badge badge-info">
                                                GW: <%= job.data.gameweek || 'N/A' %>
                                            </span>
                                            <span class="badge badge-secondary">
                                                By: <%= job.data.triggeredBy || 'unknown' %>
                                            </span>
                                            <% if(job.data.isMatchDay) { %>
                                                <span class="badge badge-danger">Match Day</span>
                                            <% } %>
                                        </div>
                                        <div class="job-timestamp">
                                            Processed At: <%- formatTimestampDual(job.processedOn) %>
                                        </div>
                                        <% if(job.data) { %>
                                            <pre><%= JSON.stringify(job.data, null, 2) %></pre>
                                        <% } %>
                                    </div>
                                </td>
                            </tr>
                            <% }); %>
                        </tbody>
                    </table>
                    <% } else { %>
                    <div class="empty-state">No active jobs</div>
                    <% } %>
                </div>

                <div id="completed" class="tab-content">
                    <% if (jobs.completed.length > 0) { %>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Status</th>
                                <th>Completed At</th>
                                <th>Duration</th>
                                <th>Result</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% jobs.completed.forEach(job => { %>
                            <tr>
                                <td><%= job.id %></td>
                                <td><%= job.name %></td>
                                <td>
                                    <span class="status-badge completed"
                                        >Completed</span
                                    >
                                </td>
                                <td><%- formatTimestampDual(job.finishedOn) %></td>
                                <td>
                                    <%= Math.round((job.finishedOn -
                                    job.processedOn) / 1000) %> sec
                                </td>
                                <td>
                                    <pre>
<%= JSON.stringify(job.returnvalue, null, 2) %></pre
                                    >
                                </td>
                            </tr>
                            <% }); %>
                        </tbody>
                    </table>
                    <% } else { %>
                    <div class="empty-state">No completed jobs</div>
                    <% } %>
                </div>

                <div id="failed" class="tab-content">
                    <% if (jobs.failed.length > 0) { %>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Status</th>
                                <th>Failed At</th>
                                <th>Error Reason</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% jobs.failed.forEach(job => { %>
                            <tr>
                                <td><%= job.id %></td>
                                <td><%= job.name %></td>
                                <td>
                                    <span class="status-badge failed"
                                        >Failed</span
                                    >
                                </td>
                                <td><%- formatTimestampDual(job.finishedOn) %></td>
                                <td><pre><%= job.failedReason %></pre></td>
                            </tr>
                            <% }); %>
                        </tbody>
                    </table>
                    <% } else { %>
                    <div class="empty-state">No failed jobs</div>
                    <% } %>
                </div>

                <div id="stalled" class="tab-content">
                    <% if (jobs.stalled.length > 0) { %>
                    <div class="action-bar">
                        <button class="retry-all-btn" data-queue="<%= queueName %>">Retry All Stalled Jobs</button>
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Status</th>
                                <th>Created At</th>
                                <th>Data</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% jobs.stalled.forEach(job => { %>
                            <tr>
                                <td><%= job.id %></td>
                                <td><%= job.name %></td>
                                <td><span class="status-badge stalled">Stalled</span></td>
                                <td><%- formatTimestampDual(job.timestamp) %></td>
                                <td><pre><%= JSON.stringify(job.data, null, 2) %></pre></td>
                                <td>
                                    <button class="retry-job" data-job-id="<%= job.id %>" data-queue="<%= queueName %>">Retry</button>
                                    <button class="remove-job" data-job-id="<%= job.id %>" data-queue="<%= queueName %>">Remove</button>
                                </td>
                            </tr>
                            <% }); %>
                        </tbody>
                    </table>
                    <% } else { %>
                    <div class="empty-state">No stalled jobs</div>
                    <% } %>
                </div>

                <div id="delayed" class="tab-content">
                    <% if (jobs.delayed.length > 0) { %>
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Status</th>
                                <th>Scheduled For</th>
                                <th>Data</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% jobs.delayed.forEach(job => { %>
                            <tr>
                                <td><%= job.id %></td>
                                <td><%= job.name %></td>
                                <td><span class="status-badge delayed">Delayed</span></td>
                                <td><%- formatTimestampDual(job.timestamp + (job.opts.delay || 0)) %></td>
                                <td><pre><%= JSON.stringify(job.data, null, 2) %></pre></td>
                            </tr>
                            <% }); %>
                        </tbody>
                    </table>
                    <% } else { %>
                    <div class="empty-state">No delayed jobs</div>
                    <% } %>
                </div>
            </div>
        </div>

        <script>
            // Tab functionality
            document.querySelectorAll('.tab-btn').forEach((button) => {
                button.addEventListener('click', () => {
                    // Hide all tab contents
                    document
                        .querySelectorAll('.tab-content')
                        .forEach((content) => {
                            content.classList.remove('active');
                        });

                    // Remove active class from all buttons
                    document.querySelectorAll('.tab-btn').forEach((btn) => {
                        btn.classList.remove('active');
                    });

                    // Show the selected tab content
                    const tabId = button.getAttribute('data-tab');
                    document.getElementById(tabId).classList.add('active');
                    button.classList.add('active');
                });
            });

            // Auto refresh every 30 seconds
            setTimeout(() => {
                window.location.reload();
            }, 30000);

            // Clean stalled jobs
            document.querySelectorAll('.retry-all-btn').forEach((button) => {
                button.addEventListener('click', async () => {
                    const queueName = button.getAttribute('data-queue');
                    if (!queueName) return;
                    
                    try {
                        const response = await fetch(`/dashboard/queue/${queueName}/clean-stalled`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                        });
                        
                        const result = await response.json();
                        if (result.success) {
                            alert(`${result.message}`);
                            window.location.reload();
                        } else {
                            alert(`Error: ${result.error}`);
                        }
                    } catch (error) {
                        alert('Failed to clean stalled jobs');
                    }
                });
            });
        </script>
    </body>
</html>
